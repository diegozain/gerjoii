function Ee_ = w_objs_e(geome_,parame_,finite_,gerjoii_,ke)
% ..............................................................................
% computes objective function value for a perturbation of the parameters
% in the direction of the gradient with a step-size ke.
% ..............................................................................
% clean dc first
if isfield(gerjoii_,'dc')
  gerjoii_=rmfield(gerjoii_,'dc');
end
if isfield(parame_,'dc')
  parame_=rmfield(parame_,'dc');
end
if isfield(finite_,'dc')
  finite_=rmfield(finite_,'dc');
end
% ..............................................................................
% load source, receivers, measuring operator, observed data & std
% ..............................................................................
% [parame_,gerjoii_] = w_load(parame_,gerjoii_,is);
Nw = sparse_diag(parame_.natu.w.N);
% ..............................................................................
% perturb
% ..............................................................................
parame_.w.epsilon = parame_.w.epsilon .* ...
                    exp( -ke*parame_.w.epsilon .* gerjoii_.w.g_e);
% ..............................................................................
% fwd model
% ..............................................................................
[~,gerjoii_] = w_fwd_(geome_,parame_,finite_,gerjoii_,0);
% ..............................................................................
% filter wavefields
% ..............................................................................
parame_.natu.w.d_2d = filt_gauss(parame_.natu.w.d_2d,geome_.w.dt,...
                               gerjoii_.w.regu.f_,gerjoii_.w.regu.f__,8);%[Hz]
gerjoii_.w.d_2d = filt_gauss(gerjoii_.w.d_2d,geome_.w.dt,...
                               gerjoii_.w.regu.f_,gerjoii_.w.regu.f__,8);%[Hz]
% ..............................................................................
% obj
% ..............................................................................
d_2do = parame_.natu.w.d_2d;
if isfield(gerjoii_.w,'obj_FNCs')==1
  Ee_ = 0;
  for iw_=1:numel(gerjoii_.w.obj_FNCs)
    % choose objective function 
    obj_fnc = gerjoii_.w.obj_FNCs(iw_);
    % ..........................................................................
    % filter wavefields
    % ..........................................................................
    if strcmp(obj_fnc,'FREQstp')
      d_2do = filt_gauss(d_2do,geome_.w.dt,...
                         gerjoii_.w.regu.fstp_,gerjoii_.w.regu.fstp__,8);%[Hz]
      gerjoii_.w.d_2d = filt_gauss(gerjoii_.w.d_2d,geome_.w.dt,...
                                     gerjoii_.w.regu.fstp_,gerjoii_.w.regu.fstp__,8);%[Hz]
    end
    % ..........................................................................
    [~,d,d_o] = w_bozdag(d_2do,gerjoii_.w.d_2d,obj_fnc);
    Ee__ = w_E(d_o,d,Nw,gerjoii_.w.obj_FNC);
    Ee__ = Ee__ / ( d_o(:).' * d_o(:) );
    Ee_  = Ee_ + gerjoii_.w.g_e_weights(iw_)*Ee__;
  end
elseif isfield(gerjoii_.w,'obj_FNCs')==0
  % ............................................................................
  Ee_ = w_E(d_2do,gerjoii_.w.d_2d,Nw,gerjoii_.w.obj_FNC);
  Ee_ = Ee_ / ( d_2do(:).' * d_2do(:) );
end
end